{"version":3,"sources":["components/Micomponente.js","components/C00ComponenteNuevo.jsx","components/C01Saludo.js","components/C02Contador.js","components/C03OperadorTercario.js","components/C04Matriz.js","components/C05MatrizOperaciones.js","App.js","serviceWorker.js","index.js"],"names":["Micomponente","ComponenteNuevo","Saludo","msj","variable","Contador","useState","valor","setValor","numero","setNumero","onClick","console","log","Operador","Matriz","lista","map","item","index","key","MatrizOperaciones","setLista","dias","setDias","uniendoArray","texto","App","C00ComponenteNuevo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yKAIeA,G,MAHK,WAChB,OAAS,6DCGEC,EAHQ,WACnB,OAAS,iDCQEC,EARA,SAACC,GACZ,OACI,6BACI,sDACA,wCAAcA,EAAIC,Y,OCcfC,EAnBE,WAAQ,IAAD,EACKC,mBAAS,GADd,mBACdC,EADc,KACPC,EADO,OAEOF,mBAAS,GAFhB,mBAEdG,EAFc,KAENC,EAFM,KASpB,OACI,kBAAC,WAAD,KACI,4BAAQC,QAAS,kBAAKH,EAASD,EAAO,KAAtC,aACA,0DAAgCA,GAChC,6BACA,4BAAQI,QATK,WACjBD,EAAUD,EAAO,GACjBG,QAAQC,IAAI,yBAOR,cACA,2DAAiCJ,KCN9BK,EATC,WAEX,OACI,kBAAC,WAAD,KACA,oDAC6B,kBCqBfC,EA1BT,WAAM,IAAD,EACST,mBAAS,CAAC,EAAE,EAAE,EAAE,EAAE,IAD3B,mBACTU,EADS,UAEf,OACK,kBAAC,WAAD,KACG,4DACEA,EAAMC,KAAI,SAACC,GAAD,OAASA,KACrB,6BACA,4DACEF,EAAMC,KAAI,SAACC,GAAD,OAAU,8BAAOA,MAC7B,6BACA,0DAEQF,EAAMC,KAAI,SAACC,EAAMC,GAAP,OACV,+BAAKD,EAAL,MAAcC,MAGtB,6BACA,2DAEIH,EAAMC,KAAI,SAACC,EAAMC,GAAP,OACN,uBAAGC,IAAMD,GAAT,IAAmBD,EAAnB,MAA4BC,EAA5B,W,OC6BGE,EAjDG,WAAO,IAAD,EAEHf,mBAAS,CAAC,EAAE,EAAE,EAAE,EAAE,IAFf,mBAEtBU,EAFsB,KAEfM,EAFe,OAGLhB,mBAAS,CAAC,QAAS,SAAU,YAAY,WAHpC,mBAGtBiB,EAHsB,KAGhBC,EAHgB,KAItBC,EAAY,sBAAOT,GAAP,YAAgBO,IAJN,EAMDjB,mBAAS,GANR,mBAMtBG,EANsB,KAMdC,EANc,OAaFJ,mBAAS,CAAC,UAAU,SAAS,YAb3B,mBAarBoB,EAbqB,UAmB5B,OACK,kBAAC,WAAD,KACA,+DAEGD,EAAaR,KAAI,SAACC,EAAMC,GAAP,OACjB,uBAAGC,IAAOD,GAAV,IAAoBD,EAApB,MAA6BC,EAA7B,QAGA,6BAEH,2DACA,4BAAQR,QAvBS,WAElBD,EAAUD,EAAS,GACnBa,EAAS,GAAD,mBAAKN,GAAL,CAAYP,OAoBnB,oBAEIO,EAAMC,KAAI,SAACC,EAAMC,GAAP,OACV,uBAAGC,IAAOD,GAAV,IAAoBD,EAApB,MAA6BC,EAA7B,QAIL,6BACA,4DACC,4BAAQR,QAzBQ,WAEjBa,EAAQ,GAAD,mBAAKD,GAAL,YAAaG,OAuBnB,mBAEIH,EAAKN,KAAI,SAACC,EAAMC,GAAP,OACT,uBAAGC,IAAOD,GAAV,IAAoBD,EAApB,MAA6BC,EAA7B,UCXEQ,MAtBf,WACE,OACE,6BACC,+CACA,kBAAC,EAAD,MACA,6BACA,kBAACC,EAAD,MACA,6BACA,kBAAC,EAAD,CAAQxB,SAAS,4BACjB,6BACA,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,QCfeyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,a","file":"static/js/main.9624cfb1.chunk.js","sourcesContent":["import React from 'react';\r\nconst Micomponente =()=>{\r\n    return ( <h1>hola este es mi componente </h1>)\r\n}\r\nexport default Micomponente;","import React from 'react';\r\n\r\nconst ComponenteNuevo =() => {\r\n    return ( <h1>Componente (JSX)</h1> );\r\n}\r\nexport default ComponenteNuevo;","import React from 'react';\r\n\r\n\r\nconst Saludo = (msj) => {\r\n    return (\r\n        <div>\r\n            <h1> Hola!  desde react...</h1>\r\n            <h2>Mensaje: {msj.variable}</h2>\r\n        </div>\r\n    )\r\n}\r\nexport default Saludo;","import React, {useState, Fragment } from 'react';\r\n\r\nconst Contador = ()  => {\r\n    const[valor, setValor] = useState(0);\r\n    const[numero, setNumero] = useState(0);\r\n\r\n\r\n    const IncrementoDos =() => {\r\n        setNumero(numero+1);\r\n        console.log(\"Mensaje de contador\");\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <button onClick={()=> setValor(valor +1)}>Contador1</button>\r\n            <span>Incremento de contador1: {valor}</span>\r\n            <hr />\r\n            <button onClick={IncrementoDos}>Contador2 </button>\r\n            <span> Incremento de contador2: {numero}</span>\r\n        </Fragment>\r\n    );\r\n}\r\nexport default Contador;\r\n","import React, {Fragment} from 'react';\r\n\r\nconst Operador =() => {\r\n     const edad =18;\r\n     return (\r\n         <Fragment>\r\n         <h1> Operador tercario..</h1>\r\n         {edad <18? 'Mayor de edad' : 'Menor de edad' }\r\n         </Fragment>\r\n     );\r\n}\r\nexport default Operador;","import React, {useState, Fragment} from 'react';\r\n\r\nconst Matriz =() =>{ \r\n    const[lista, setLista]= useState([1,2,3,4,5])\r\n    return (     \r\n         <Fragment>\r\n            <h1>Lectura sin index y sin html</h1>\r\n            { lista.map((item)=> item)}\r\n            <hr />\r\n            <h1>Lectura sin index y con html</h1>\r\n            { lista.map((item) => <span>{item}</span>)}\r\n            <hr />\r\n            <h1>Listas con index y sin key</h1>\r\n            {\r\n                    lista.map((item, index) =>\r\n                    <p> {item} - {index}</p>\r\n                    )\r\n            }\r\n            <hr />\r\n            <h1>Listas con index y con Key </h1>\r\n            {\r\n                lista.map((item, index) =>\r\n                    <p key ={index} > {item} - {index}  </p>\r\n                )\r\n            }\r\n        </Fragment>\r\n    );\r\n        }\r\n        export default Matriz;","import React, {useState, Fragment} from 'react';\r\n\r\nconst MatrizOperaciones = () => { \r\n\r\n    const[lista, setLista] = useState([1,2,3,4,5]);\r\n    const[dias, setDias] = useState([\"Lunes\", \"Martes\", \"Miercoles\",\"Jueves\"]);\r\n    const uniendoArray = [...lista,...dias];\r\n\r\n    const[numero, setNumero] = useState(6);\r\n    const agregarNumero = () => {\r\n        //console.log(ubiendoArray);\r\n        setNumero(numero + 1);\r\n        setLista([...lista, numero]);\r\n    \r\n    }\r\n    const [texto, setTexto] = useState([\"Viernes\",\"Sabado\",\"Domingo\"]);\r\n    const agregarTexto = () => {\r\n        //setTexto(texto);\r\n        setDias([...dias,...texto]);\r\n    }\r\n    \r\n    return (     \r\n         <Fragment>\r\n         <h1>Lectura de la union de matrices</h1>\r\n         {\r\n            uniendoArray.map((item, index) =>\r\n            <p key = {index} > {item} - {index} </p>\r\n            )\r\n         }\r\n            <hr />\r\n\r\n         <h1>Agregar un valor a un array</h1>\r\n         <button onClick={agregarNumero}> Agregar Numero </button>\r\n         {\r\n             lista.map((item, index) =>\r\n             <p key = {index} > {item} - {index} </p>\r\n             )\r\n         }\r\n         \r\n        <hr />\r\n        <h1> Agregar un texto a un array</h1>\r\n         <button onClick={agregarTexto}> Agregar texto </button>\r\n         {\r\n             dias.map((item, index) =>\r\n             <p key = {index} > {item} - {index} </p>\r\n             )\r\n         }\r\n         \r\n         </Fragment>\r\n            );\r\n        }\r\n        export default MatrizOperaciones;","import React from 'react';\nimport Micomponente from './components/Micomponente';\nimport C00ComponenteNuevo from './components/C00ComponenteNuevo';\nimport Saludo from './components/C01Saludo';\nimport Contador from './components/C02Contador';\nimport Operador from './components/C03OperadorTercario';\nimport Matriz from './components/C04Matriz';\nimport MatrizOperaciones from './components/C05MatrizOperaciones';\n//import logo from './logo.svg';\n//import './App.css';\n\nfunction App() {\n  return (\n    <div>\n     <h1>Practicas-React</h1>\n     <Micomponente />\n     <hr />\n     <C00ComponenteNuevo />\n     <hr />\n     <Saludo variable=\"Otro saludo en variable\" />\n     <hr />\n     <Contador />\n     <hr />\n     <Operador />\n     <hr /> \n     <Matriz />\n     <hr /> \n     <MatrizOperaciones />\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}